-- parent 
--ID(PK) 

CREATE SEQUENCE SEQ_PARENT;
CREATE TABLE TBL_PARENT(
	ID NUMBER CONSTRAINT PK_PARENT PRIMARY KEY,
	PARENT_NAME VARCHAR2(225) NOT NULL,
	PARNET_AGE NUMBER,
	PARENT_ADDRESS VARCHAR2(225),
	PARENT_PHONE VARCHAR2(225) NOT NULL,
	PARENT_GENDER CHAR(10)
	CONSTRAINT GENDER_TYPE CHECK(PARENT_GENDER IN('M', 'W'))
	);
	

--SELECT 컬럼명1, 컬럼명2*
--FROM 테이블1, 테이블 2 하지만 하나만 사용


SELECT *
FROM TBL_PARENT;

--INSERT INTO TBL_PARENT(컬럼명) 괄호 없으면 전체 컬럼 가지고 옴
--VALUES(값1, 값2,...)
--WHERE 조건절
INSERT INTO TBL_PARENT(ID, PARENT_NAME,PARNET_AGE, PARENT_ADDRESS, PARENT_PHONE, PARENT_GENDER)
VALUES(SEQ_PARENT.NEXTVAL,'홍길동', '30', '경기도 과천시', '010-1234-5678', 'M');

INSERT INTO TBL_PARENT(ID, PARENT_NAME,PARNET_AGE, PARENT_ADDRESS, PARENT_PHONE, PARENT_GENDER)
VALUES(SEQ_PARENT.NEXTVAL,'장보고', '37', '경기도 군포시', '010-4456-1123', 'M');

INSERT INTO TBL_PARENT(ID, PARENT_NAME,PARNET_AGE, PARENT_ADDRESS, PARENT_PHONE, PARENT_GENDER)
VALUES(SEQ_PARENT.NEXTVAL,'김영희', '45', '경기도 안산시', '010-8813-6644', 'W');

INSERT INTO TBL_PARENT(ID, PARENT_NAME,PARNET_AGE, PARENT_ADDRESS, PARENT_PHONE, PARENT_GENDER)
VALUES(SEQ_PARENT.NEXTVAL,'김철수', '50', '서울시 관악구', '010-8813-664', 'M');

INSERT INTO TBL_PARENT(ID, PARENT_NAME,PARNET_AGE, PARENT_ADDRESS, PARENT_PHONE, PARENT_GENDER)
VALUES(SEQ_PARENT.NEXTVAL,'이태희', '27', '경기도 고양시', '010-7711-1123', 'W');


SELECT ID, PARENT_NAME,PARNET_AGE, PARENT_ADDRESS, PARENT_PHONE, PARENT_GENDER
FROM TBL_PARENT
WHERE PARENT_GENDER = 'M';

-- WHERE 절
SELECT ID, PARENT_NAME,PARNET_AGE, PARENT_ADDRESS, PARENT_PHONE, PARENT_GENDER
FROM TBL_PARENT
WHERE PARNET_AGE > '40' AND PARNET_AGE < '50' AND PARENT_GENDER = 'W';

--========================================================================================
/*
 * 
 * LIKE: 포함된 문자열 값을 찾고, 문자의 개수도 제한을 줄 수 있다.
 * 
 * %: 모든 것
 * _: 글자 수
 * 
 * 예시
 '%A' : A로 끝나는 모든 값(NDFLSNJFA, 123NFJA, ...)
 'A%' : A로 시작하는 모든 값(AA, ANDKFS, AJD, ...)
 'A__' : A로 시작하며 3글자인 값(ABC, AAA, ADD, ...)
 '_A' : A로 끝나며 2글자인 값(FA, CA, DA, ...)
 '%A%' : A가 포함된 값(APPLE, BANANA, TASK, ...)
 * 
 * */


-- 경기도에 살고 있는 부모를 조회
SELECT *
FROM TBL_PARENT
WHERE PARENT_ADDRESS LIKE '경기도%';

-- 희로 끝나는 
SELECT  *
FROM TBL_PARENT 
WHERE PARENT_NAME LIKE '__희';

SELECT *
FROM TBL_PARENT
WHERE PARENT_ADDRESS LIKE '%과천%';


SELECT *
FROM TBL_PARENT
WHERE PARENT_ADDRESS NOT LIKE '%과천%';

--==================================================================================
--집게함수
/*집계 함수
 * 
 * 평균 AVG()
 * 최대값 MAX()
 * 최소값 MIN()
 * 총 합 SUM()
 * 개수 COUNT()
 * 
 * */

CREATE SEQUENCE SEQ_FIELD_TRIP;
CREATE TABLE TBL_FIELD_TRIP(
	ID NUMBER CONSTRAINT PK_FIELD_TRIP PRIMARY KEY,
	FIELD_TRIP_TITLE VARCHAR2(225),
	FIELD_TRIP_CONTENT VARCHAR2(225),
	FIELD_TRIP_NUMBER NUMBER
);



INSERT INTO TBL_FIELD_TRIP
VALUES(SEQ_FIELD_TRIP.NEXTVAL, '어서와 매미 농장', '매미 잡자 매미 잡자', 20);
INSERT INTO TBL_FIELD_TRIP
VALUES(SEQ_FIELD_TRIP.NEXTVAL, '아아스크림 빨리 먹기 대회', '아이크림 누가 잘 먹나',100);
INSERT INTO TBL_FIELD_TRIP
VALUES(SEQ_FIELD_TRIP.NEXTVAL, '고구마 심기' , '고구마가 왕 커요', 10);
INSERT INTO TBL_FIELD_TRIP
VALUES(SEQ_FIELD_TRIP.NEXTVAL, '숭어 얼음 낚시' , '숭어 잡자 추워도 참아!', 80);
INSERT INTO TBL_FIELD_TRIP
VALUES(SEQ_FIELD_TRIP.NEXTVAL, '커피 체험 공장', '커피 빈 객체화', 60);
INSERT INTO TBL_FIELD_TRIP
VALUES(SEQ_FIELD_TRIP.NEXTVAL, '치즈 제작하기', '여기 치즈 저기 치즈 이쪽 치즈 저쪽 치즈', 5);
INSERT INTO TBL_FIELD_TRIP
VALUES(SEQ_FIELD_TRIP.NEXTVAL, '승마 체험', '이리야!', 9);

SELECT * FROM TBL_FIELD_TRIP;
/*집계 함수
 * 
 * 평균 AVG()
 * 최대값 MAX()
 * 최소값 MIN()
 * 총 합 SUM()
 * 개수 COUNT()
 * 
 * */
SELECT COUNT(*) -- 행  몇 개인지
FROM TBL_FIELD_TRIP;

SELECT COUNT(ID) -- 성능 좋음
FROM TBL_FIELD_TRIP;


--  "" 컬럼의 이름은 더블 쿼터
SELECT SUM(FIELD_TRIP_NUMBER) AS "총 수용인원" 
FROM TBL_FIELD_TRIP;

-- 체험학습 평균 인원 수 , ROUND(값, 자릿 수) 
SELECT ROUND (AVG(FIELD_TRIP_NUMBER), 1) AS "평균 인원"
FROM TBL_FIELD_TRIP;

-- 반올림 FLOOR(값, 자릿 수) , SELL()
SELECT FLOOR (AVG(FIELD_TRIP_NUMBER)) AS "평균 인원"
FROM TBL_FIELD_TRIP;
-- 올림 SELL()
SELECT SELL (AVG(FIELD_TRIP_NUMBER)) AS "평균 인원"
FROM TBL_FIELD_TRIP;


-- '체험'글자를 포함하는 체험학습의 총 인원 수
SELECT SUM(FIELD_TRIP_NUMBER) AS "체험 글자를 포함하는 체험학습 총인원"
FROM TBL_FIELD_TRIP 
WHERE  FIELD_TRIP_TITLE LIKE '%체험%';


-- 고구마 또는 아이스크림 들어간 체험 학습의 평균 인원수
SELECT AVG(FIELD_TRIP_NUMBER) AS 평균인원수
FROM TBL_FIELD_TRIP
WHERE FIELD_TRIP_TITLE LIKE '%고구마%' OR FIELD_TRIP_TITLE LIKE '%아아스크림%';

-- 체험학습 제목이 '기'로 끝나는 체험 학습의 최소 인원수
--===================================================================================================
SELECT MIN(FIELD_TRIP_NUMBER) AS "최소 인원"
FROM TBL_FIELD_TRIP
WHERE FIELD_TRIP_TITLE LIKE '%기';

CREATE SEQUENCE SEQ_PRODUCT;
CREATE TABLE TBL_PRODUCT (
	ID NUMBER CONSTRAINT PK_PRODUCT PRIMARY KEY,
	PRODUCT_NAME VARCHAR2(225),
	PRODUCT_PRICE NUMBER,
	PRODUCT_STOCK NUMBER
	);


INSERT INTO TBL_PRODUCT
VALUES(SEQ_PRODUCT.NEXTVAL, '배승원의 그램', 1000, 20);
INSERT INTO TBL_PRODUCT
VALUES(SEQ_PRODUCT.NEXTVAL, '배승원의 그램', 2000, 40);
INSERT INTO TBL_PRODUCT
VALUES(SEQ_PRODUCT.NEXTVAL, '배승원의 그램', 4000, 30);
INSERT INTO TBL_PRODUCT
VALUES(SEQ_PRODUCT.NEXTVAL, '배승원의 그램', 1000, 60);
INSERT INTO TBL_PRODUCT
VALUES(SEQ_PRODUCT.NEXTVAL, '배승원의 그램', 3000, 80);
INSERT INTO TBL_PRODUCT
VALUES(SEQ_PRODUCT.NEXTVAL, '배승원의 그램', 2000, 10);
INSERT INTO TBL_PRODUCT
VALUES(SEQ_PRODUCT.NEXTVAL, '배승원의 그램', 5000, 20);
INSERT INTO TBL_PRODUCT
VALUES(SEQ_PRODUCT.NEXTVAL, '배승원의 그램', 2000, 15);
INSERT INTO TBL_PRODUCT
VALUES(SEQ_PRODUCT.NEXTVAL, '배승원의 그램', 2000, 65);
INSERT INTO TBL_PRODUCT
VALUES(SEQ_PRODUCT.NEXTVAL, '배승원의 그램', 5000, 40);
INSERT INTO TBL_PRODUCT
VALUES(SEQ_PRODUCT.NEXTVAL, '배승원의 그램', 3000, 17);
INSERT INTO TBL_PRODUCT
VALUES(SEQ_PRODUCT.NEXTVAL, '배승원의 그램', 1000, 25);
INSERT INTO TBL_PRODUCT
VALUES(SEQ_PRODUCT.NEXTVAL, '배승원의 그램', 3000, 25);
INSERT INTO TBL_PRODUCT
VALUES(SEQ_PRODUCT.NEXTVAL, '배승원의 그램', 4000, 20);
INSERT INTO TBL_PRODUCT
VALUES(SEQ_PRODUCT.NEXTVAL, '배승원의 그램', 2000, 40);

 -- GROUP BY
 -- 1. GROUP BY로 지정한 컬럼만 초회할 수 있다
 -- 2. 그룹 함수를 조회할 수 있다.
SELECT PRODUCT_NAME , COUNT(PRODUCT_NAME)
FROM TBL_PRODUCT
GROUP BY PRODUCT_NAME; -- GROUP BY만 가지고 올 수 있다 15개의 컬럼은 하나의 그룹으로 잡았다. 

SELECT 
	PRODUCT_PRICE AS 상품명,
	PRODUCT_NAME AS "상품 가격",
	COUNT(ID) AS "개수"
FROM 
	TBL_PRODUCT
GROUP BY PRODUCT_PRICE, PRODUCT_NAME
HAVING AVG(PRODUCT_PRICE) > 2000;


SELECT *FROM TBL_PRODUCT;
--1. 가격대별 재고 수
SELECT PRODUCT_PRICE || '개' AS 가격대, SUM(PRODUCT_STOCK)
FROM TBL_PRODUCT 
GROUP BY PRODUCT_PRICE;


--2. 재고가 50개 이상의 개수
SELECT SUM(COUNT(ID))
FROM TBL_PRODUCT 
GROUP BY PRODUCT_STOCK
HAVING PRODUCT_STOCK>50;

--2
SELECT COUNT(ID)
FROM TBL_PRODUCT 
WHERE PRODUCT_STOCK>50;


--3. 재고가 30개미만인 평균 가격
SELECT AVG(SUM(PRODUCT_PRICE))
FROM TBL_PRODUCT
GROUP BY PRODUCT_STOCK
HAVING PRODUCT_STOCK < 30;

--3. 재고가 30개미만인 평균 가격
SELECT PRODUCT_PRICE AS "가격대", COUNT(PRODUCT_PRICE) AS "개수", SUM(PRODUCT_PRICE) AS "총 가격의 합"
FROM TBL_PRODUCT
WHERE PRODUCT_STOCK < 30
GROUP BY PRODUCT_PRICE
HAVING COUNT(PRODUCT_PRICE) < 2;


-- WHERE 컬럼명 IN(값1, 값2, 값3)
SELECT *
FROM TBL_PRODUCT 
WHERE PRODUCT_STOCK IN ('20', '40', '30');

--가격이 천원 오천원 삼천원인 상품만 조회
SELECT *
FROM TBL_PRODUCT
WHERE PRODUCT_PRICE IN ('1000', '5000', '3000');

-- 상품 재고가 15, 20, 25인 상품 중
-- 상품 재고별 개수와 평균 가격 구하기
SELECT PRODUCT_STOCK, COUNT(PRODUCT_STOCK) AS "재고 개수", ROUND(AVG(PRODUCT_PRICE)) || '원' AS 평균
FROM TBL_PRODUCT 
WHERE PRODUCT_STOCK IN ('15', '20', '25')
GROUP BY PRODUCT_STOCK;

-- 재고와 가격 합이 상품 번호
SELECT SUM(PRODUCT_PRICE) + SUM (PRODUCT_STOCK)
FROM TBL_PRODUCT;

SELECT PRODUCT_PRICE, SUM(PRODUCT_STOCK)*PRODUCT_PRICE
FROM TBL_PRODUCT 
GROUP BY PRODUCT_PRICE;



SELECT PRODUCT_PRICE , COUNT(PRODUCT_STOCK) AS "재고", COUNT(10000/PRODUCT_PRICE) AS "만원으로 살 수 있는 개수"
FROM TBL_PRODUCT
GROUP BY PRODUCT_PRICE;


--=======================================
--  5.HAVING 선택 가능 .GROUP BY 조건절 


-- 순서 1. SELECT 
-- 	2.FROM 
--  3.WHERE 선택 가능
--  4.GROUP BY 선택 가능
--  5.HAVING 선택 가능
--  6.ORDER BY선택 가능

-- 평균 인원 보다 인원수가 많은 체험학습 초죄 집게 함수는 사용할 수 있는 정해짐
-- 1. SELECT 에서 가능
-- 2. HAVING 절에서 가능

--SELECT *
--FROM TBL_FIELD_TRIP;
--WHERE FIELD_TRIP_NUMBER > AVG(FIELD_TRIP_NUMBER);--/ 7개의 그룹함수와 > 하나의 함수




--GROUP BY








